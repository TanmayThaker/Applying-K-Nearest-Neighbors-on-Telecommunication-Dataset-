import itertools
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormater
import pandas as pd
import port matplotlib.ticker as ticker
from sklearn import preprocessing
%matplotlib inline

df = pd.read_csv('teleCust1000t.csv')
df.head()

#Data Visualization
df['custcat'].value_counts()
df.hist(column="income", bins=50)

#Feature set
#Lets define features set X:
df.columns
X= df[['region', 'tenure','age', 'marital', 'address', 'income', 'ed', 'employ','retire', 'gender', 'reside']]
X=X[0:5]

#labels of our dataset
y=df['custcat'].values
y[0:5]


#Normalizing the data
#Data Standardization give data zero mean and unit variance, it is good practice, especially for algorithms such as KNN which is based on distance of cases:
X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))

#Test_Train_Split

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=4)
print("Train set:", X_train.shape,y_train.shape)
print("Test set:", X_test.shape,y_test.shape)

#Classification
#K NEAREST NEIGHBOURS

from sklearn.neighbors import KNeighborsClassifier

#Training our algorithm with K=4

k = 4
neigh = KNeighborsClassifier(n_neighbors=k).fit(X_train_train,y_train)
neigh

#PREDICTING THE DATASET
yhat = neigh.predict(X_test)
yhat[0:5]

#Accuracy Evaluation

from sklearn import metrics
print("Train set Accuracy", metrics.accuracy_score(y_train, neigh.predict(X_train)))
print("Test set Accuracy", mertics.accuracy_score(y_test,yhat))


#For K=6(Same code for k=6)
from sklearn.neighbors import KNeighborsClassifier
K=6
neigh=KNeighborsClassifier(n_neighbors=K).fit(X_train,y_train)
#predicting thr value
yhat=neigh.predict(X_test)
yhat[0:5]
from sklearn import metrics
print("Train set Accuracy:",metrics.accuracy_score(y_train,neigh.predict(X_train)))
print("Test set Accuracy: ", metrics.accuracy_score(y_test, neigh.predict(X_test)))

#Code for different number of K's
Ks=10
mean_acc=np.zeros((Ks-1))
std_acc=np.zeros((Ks-1))
ConfusionMtx=[];
for n in range(1,Ks):
    #Train model and predict
    neigh=KNearestClassifier(n_neighbors=n).fit(X_train,y_train)
    yhat=neigh.predict(X_test)
    mean_acc[n-1]=metrics.accuracy_score(y_test,yhat)
    std_acc[n-1]=np.std(yhat==t_test)/np.sqrt(yhat.shape[0])

#Plotting model accuracy for different values of K

plt.plot(range(1,Ks),mean_acc,'g')
plt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)
plt.legend(('Accuracy ', '+/- 3xstd'))
plt.ylabel('Accuracy ')
plt.xlabel('Number of Nabors (K)')
plt.tight_layout()
plt.show()

#Printing the best accuracy score:
print( "The best accuracy was with", mean_acc.max(), "with k=", mean_acc.argmax()+1)
